# dev3 当前方案是 只分库分表 并不进行读写分离 （全部采用inline行表达式算法）全部分库分表  3个库 每个库分两张表#数据源名称，多数据源以逗号分隔sharding.jdbc.datasource.names=ds0,ds1,ds2# 数据库连接池类名称sharding.jdbc.datasource.ds0.type=org.apache.commons.dbcp.BasicDataSource# 数据库驱动类名sharding.jdbc.datasource.ds0.driver-class-name=com.mysql.jdbc.Driver# 数据库url连接sharding.jdbc.datasource.ds0.url=jdbc:mysql://localhost:3306/ds0?serverTimezone=GMT%2B8# 数据库用户名sharding.jdbc.datasource.ds0.username=root#数据库密码sharding.jdbc.datasource.ds0.password=root#数据库连接池的其它属性# 数据库连接池类名称sharding.jdbc.datasource.ds1.type=org.apache.commons.dbcp.BasicDataSource# 数据库驱动类名sharding.jdbc.datasource.ds1.driver-class-name=com.mysql.jdbc.Driver# 数据库url连接sharding.jdbc.datasource.ds1.url=jdbc:mysql://localhost:3306/ds1?serverTimezone=GMT%2B8# 数据库用户名sharding.jdbc.datasource.ds1.username=root#数据库密码sharding.jdbc.datasource.ds1.password=root#数据库连接池的其它属性# 数据库连接池类名称sharding.jdbc.datasource.ds2.type=org.apache.commons.dbcp.BasicDataSource# 数据库驱动类名sharding.jdbc.datasource.ds2.driver-class-name=com.mysql.jdbc.Driver# 数据库url连接sharding.jdbc.datasource.ds2.url=jdbc:mysql://localhost:3306/ds2?serverTimezone=GMT%2B8# 数据库用户名sharding.jdbc.datasource.ds2.username=root#数据库密码sharding.jdbc.datasource.ds2.password=root#数据库连接池的其它属性#配置默认的相关策略#未配置分片规则的表将通过默认数据源定位sharding.jdbc.config.sharding.default-data-source-name=ds2#默认数据库分片策略，同分库策略sharding.jdbc.config.sharding.default-database-strategy.inline.sharding-column=user_id#默认表分片策略，同分表策略sharding.jdbc.config.sharding.default-database-strategy.inline.algorithm-expression=ds$->{user_id % 3}#默认自增列值生成器类名称，缺省使用io.shardingsphere.core.keygen.DefaultKeyGenerator。该类需实现KeyGenerator接口并提供无参数的构造器sharding.jdbc.config.sharding.default-key-generator-class-name=liuxun.jpa.shard.config.SnowFlakeGenerator# 目前不支持广播表#广播表: 指所有的分片数据源中都存在的表，表结构和表中的数据在每个数据库中完全一致。适用于数据量不大且需要与海量数据的表进行关联查询的场景，例如：字典表#配置广播表(字典表) 用于关联查询#sharding.jdbc.config.sharding.broadcast-tables=t_config#由数据源名 + 表名组成，以小数点分隔。多个表以逗号分隔，支持inline表达式。缺省表示使用已知数据源与逻辑表名称生成数据节点。# 用于广播表（即每个库中都需要一个同样的表用于关联查询，多为字典表）或只分库不分表且所有库的表结构完全一致的情况#sharding.jdbc.config.sharding.tables.t_config.actual-data-nodes=ds$->{0..1}.t_config#配置订单与订单项表的相关配置 配置绑定表关系sharding.jdbc.config.sharding.tables.t_order.actual-data-nodes=ds$->{0..2}.t_order$->{0..1}sharding.jdbc.config.sharding.tables.t_order.table-strategy.inline.sharding-column=order_idsharding.jdbc.config.sharding.tables.t_order.table-strategy.inline.algorithm-expression=t_order$->{order_id % 2}sharding.jdbc.config.sharding.tables.t_order.key-generator-column-name=order_idsharding.jdbc.config.sharding.tables.t_order_item.actual-data-nodes=ds$->{0..2}.t_order_item$->{0..1}sharding.jdbc.config.sharding.tables.t_order_item.table-strategy.inline.sharding-column=order_idsharding.jdbc.config.sharding.tables.t_order_item.table-strategy.inline.algorithm-expression=t_order_item$->{order_id % 2}sharding.jdbc.config.sharding.tables.t_order_item.key-generator-column-name=order_item_idsharding.jdbc.config.sharding.binding-tables=t_order,t_order_item#配置user表以及product为单库形式 error形式#sharding.jdbc.config.sharding.tables.t_user.actual-data-nodes=ds$->{0..2}.t_user$->{0..1}#sharding.jdbc.config.sharding.tables.t_user.table-strategy.inline.sharding-column=user_id#sharding.jdbc.config.sharding.tables.t_user.table-strategy.inline.algorithm-expression=t_user$->{user_id % 2}#sharding.jdbc.config.sharding.tables.t_user.key-generator-column-name=user_id#sharding.jdbc.config.sharding.tables.t_product.actual-data-nodes=ds$->{0..2}.t_product$->{0..1}#sharding.jdbc.config.sharding.tables.t_product.database-strategy.inline.sharding-column=product_id#sharding.jdbc.config.sharding.tables.t_product.database-strategy.inline.algorithm-expression=ds$->{product_id % 3}#sharding.jdbc.config.sharding.tables.t_product.table-strategy.inline.sharding-column=product_id#sharding.jdbc.config.sharding.tables.t_product.table-strategy.inline.algorithm-expression=t_product$->{product_id % 2}#sharding.jdbc.config.sharding.tables.t_product.key-generator-column-name=product_idsharding.jdbc.config.sharding.tables.t_user.actual-data-nodes=ds$->{2}.t_user$->{0..1}sharding.jdbc.config.sharding.tables.t_user.database-strategy.inline.sharding-column=user_idsharding.jdbc.config.sharding.tables.t_user.database-strategy.inline.algorithm-expression=ds2sharding.jdbc.config.sharding.tables.t_user.table-strategy.inline.sharding-column=user_idsharding.jdbc.config.sharding.tables.t_user.table-strategy.inline.algorithm-expression=t_user$->{user_id % 2}sharding.jdbc.config.sharding.tables.t_user.key-generator-column-name=user_idsharding.jdbc.config.sharding.tables.t_product.actual-data-nodes=ds$->{2}.t_product$->{0..1}sharding.jdbc.config.sharding.tables.t_product.database-strategy.inline.sharding-column=product_idsharding.jdbc.config.sharding.tables.t_product.database-strategy.inline.algorithm-expression=ds2sharding.jdbc.config.sharding.tables.t_product.table-strategy.inline.sharding-column=product_idsharding.jdbc.config.sharding.tables.t_product.table-strategy.inline.algorithm-expression=t_product$->{product_id % 2}sharding.jdbc.config.sharding.tables.t_product.key-generator-column-name=product_id#是否开启SQL显示，默认值: falsesharding.jdbc.config.sharding.props.sql.show=true#工作线程数量，默认值: CPU核数#sharding.jdbc.config.sharding.props.executor.size=4